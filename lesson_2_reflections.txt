What happens when you initialize a repository? Why do you need to do it?

When you initialize a Git repository it sets up a .git folder and prepares the current directory for commits 

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is different from the working directory in that the staging area is a subset that only contains objects you've specifically added to it. I think the staging area offers the value of having a phase in which you can examine the files you have added into that context before going on to commit them.

How can you use the staging area to make sure you have one commit per logical change?

You use the staging area to make sure you have one commit per logical change, by making the change, then using git add to add the changed file to the staging area. Then when you use git status you can see what files have changed but not yet commited.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Some situations when branches would be helpful in keeping your history organized include branches in other languages, branches with different optional features or ease of use, or an experimental new additional feature.

How do the diagrams help you visualize the branch structure?

Diagrams help you visualize the branch structure by simplifying the hierarchical structure. It's easier to grok the concepts of branches and commits and their parents, if they're points with arrows pointing backwards (to the left) to their parents.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches together is that git combines the commits since the new branch was created with the branch it's being merged into (typically the master). We represent it in the diagram by creating a new master branch tip that points to the last commits on the merged branches as its parents because all those commmits and their ancestors are part of the new merged branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The pros of automatic merging by Git include the convenience of not having to examine line by line the code changes. The cons include the fact that you don't have direct control if it merges automatically and you have to trust that Git has merged the branches correctly.

